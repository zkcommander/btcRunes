// Generated by dts-bundle-generator v8.1.2

import { U128, U32, U64, U8, Varuint } from 'big-varuint-js';

export declare enum FlagEnum {
	Etching = 0,
	Terms = 1,
	Cenotaph = 127
}
export declare class Flag {
	private flag;
	constructor(value: U8);
	set(flag: FlagEnum): void;
	hasFlag(flag: FlagEnum): boolean;
	toValue(): U8;
}
export declare class Rune {
	readonly rune: U128;
	constructor(rune: U128);
	static fromString(str: string): Rune;
	commitBuffer(): Buffer;
	toString(): string;
	toJSON(): string;
}
export declare class RuneId {
	readonly block: U64;
	readonly tx: U32;
	constructor(block: U64, tx: U32);
	delta(next: RuneId): RuneId;
	next(next: RuneId): RuneId;
	toJSON(): {
		block: string;
		tx: string;
	};
}
export declare class Symbol {
	readonly symbol: U8;
	constructor(symbol: U8);
	static fromString(symbolStr: string): Symbol;
	toString(): string;
	toJSON(): string;
}
export type Edict = {
	id: RuneId;
	amount: U128;
	output: U32;
};
export type Terms = {
	amount?: U128;
	cap?: U128;
	height?: {
		start?: U64;
		end?: U64;
	};
	offset?: {
		start?: U64;
		end?: U64;
	};
};
export type Etching = {
	divisibility?: U8;
	premine?: U128;
	rune?: Rune;
	spacers?: U32;
	symbol?: Symbol;
	terms?: Terms;
};
export type RunestoneParams = {
	edicts: Edict[];
	etching?: Etching;
	mint?: RuneId;
	pointer?: U32;
};
export declare class Runestone {
	readonly edicts: Edict[];
	readonly etching?: Etching;
	readonly mint?: RuneId;
	readonly pointer?: U32;
	constructor(runestone: RunestoneParams);
	static dechiper(buff: Buffer): Runestone;
	enchiper(): Buffer;
}
export declare class SpacedRune {
	readonly rune: Rune;
	readonly spacers: U32;
	constructor(rune: Rune, spacers: U32);
	static fromString(str: string): SpacedRune;
	toString(): string;
	toJSON(): string;
}
export declare enum Tag {
	Body = 0,
	Flags = 2,
	Rune = 4,
	Premine = 6,
	Cap = 8,
	Amount = 10,
	HeightStart = 12,
	HeightEnd = 14,
	OffsetStart = 16,
	OffsetEnd = 18,
	Mint = 20,
	Pointer = 22,
	Cenotaph = 126,
	Divisibility = 1,
	Spacers = 3,
	Symbol = 5,
	Nop = 127
}
export declare enum ValueType {
	U8 = 0,
	U16 = 1,
	U32 = 2,
	U64 = 3,
	U128 = 4
}
export declare class TagPayload {
	payloads: number[];
	edicts: bigint[];
	tagMap: Map<number, bigint[]>;
	constructor(buff?: Buffer);
	decode(): void;
	getValue(tag: Tag, valueType: ValueType, index?: number): Varuint | undefined;
	private pushVaruint;
	encodeTagPush(tag: Tag, ...ns: (Varuint | undefined)[]): void;
	encodeMultiplePush(ns: (Varuint | undefined)[]): void;
	toBuffer(): Buffer;
}

export {};

var K=0xffn,O=0xffffn,P=0xffff_ffffn,Q=0xffff_ffff_ffff_ffffn,k=0xffff_ffff_ffff_ffff_ffff_ffff_ffff_ffffn,x=19;function Y(w){if(w<0n)throw new Error("Value must be positive");if(w>k)throw new Error(`Can't encode value more than ${k}`);const h=Buffer.alloc(x);let s=0;while(w>>7n>0)h[s]=Number(w&0b1111_1111n|0b1000_0000n),w>>=7n,s+=1;return h[s]=Number(w),h.subarray(0,s+1)}function q(w){if(w.length>x||w.length===x&&w[w.length-1]>3)throw new Error(`Can't decode value more than ${k}, buffer overflow`);let h=BigInt(0);for(let s=0;s<w.length;s+=1){const W=w[s]&127;h=h|BigInt(W)<<7n*BigInt(s)}if(h<0n)throw new Error("Value is minus, something wrong");return h}class j{n;maxNumber;constructor(w,h){this.n=w,this.maxNumber=h,this.baseValidation()}baseValidation(){if(this.n<0n)throw new Error("Value must be positive");if(this.n>this.maxNumber)throw new Error(`Value must be less than ${this.maxNumber}`)}get MAX(){return this.maxNumber}toVaruint(){return Y(this.n)}toString(){return this.n.toString()}toJSON(){return this.n.toString()}toValue(){return this.n}}class z extends j{constructor(w){super(w,K)}static fromString(w){return new z(BigInt(w))}static fromNumber(w){return new z(BigInt(w))}static fromVaruint(w){return new z(q(w))}}class C extends j{constructor(w){super(w,O)}static fromString(w){return new C(BigInt(w))}static fromNumber(w){return new C(BigInt(w))}static fromVaruint(w){return new C(q(w))}}class D extends j{constructor(w){super(w,P)}static fromString(w){return new D(BigInt(w))}static fromNumber(w){return new D(BigInt(w))}static fromVaruint(w){return new D(q(w))}}class I extends j{constructor(w){super(w,Q)}static fromString(w){return new I(BigInt(w))}static fromVaruint(w){return new I(q(w))}}class J extends j{constructor(w){super(w,k)}static fromString(w){return new J(BigInt(w))}static fromVaruint(w){return new J(q(w))}}export{Y as encodeBigVaruint,q as decodeBigVaruint,j as Varuint,K as U8_MAX_NUMBER,z as U8,Q as U64_MAX_NUMBER,I as U64,P as U32_MAX_NUMBER,D as U32,O as U16_MAX_NUMBER,C as U16,k as U128_MAX_NUMBER,J as U128,x as BUFFER_MAX_LENGTH};

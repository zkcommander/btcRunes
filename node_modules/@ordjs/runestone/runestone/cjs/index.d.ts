/* tslint:disable */
/* eslint-disable */
/**
* @param {string} s
* @returns {Uint8Array}
*/
export function decodeHex(s: string): Uint8Array;
/**
* @param {Uint8Array} bytes
* @returns {string}
*/
export function encodeHex(bytes: Uint8Array): string;
/**
* @param {Input} input
* @returns {string}
*/
export function create_tx(input: Input): string;
export interface TermsParams {
    amount: bigint | undefined;
    cap: bigint | undefined;
    height: RangeParams | undefined;
    offset: RangeParams | undefined;
}

export interface RangeParams {
    start: number | undefined;
    end: number | undefined;
}


export type Network = "main" | "test" | "signet" | "regtest";


export interface EtchingParams {
    spacedRune: SpacedRune | undefined;
    premine: bigint | undefined;
    divisibility: number | undefined;
    symbol: string | undefined;
    terms: Terms | undefined;
    turbo: boolean | undefined;
}

export interface Input {
    output_value: number | undefined;
    fee_rate: number;
}

export interface RunestoneParams {
    edicts: Edict[] | undefined;
    etching: Etching | undefined;
    mint: RuneId | undefined;
    pointer: number | undefined;
}

export interface TxOutput {
    value: number | undefined;
    script_pubkey: string;
}

export interface TxInput {
    previous_output: string;
    script_sig: string | undefined;
    sequence: number | undefined;
    witness: string[] | undefined;
}

export interface Transaction {
    version: number | undefined;
    lock_time: number | undefined;
    input: TxInput[] | undefined;
    output: TxOutput[] | undefined;
}

/**
*/
export class Edict {
/**
** Return copy of self without private attributes.
*/
  toJSON(): Object;
/**
* Return stringified version of self.
*/
  toString(): string;
  free(): void;
/**
* @param {RuneId} id
* @param {bigint} amount
* @param {number | undefined} [output]
*/
  constructor(id: RuneId, amount: bigint, output?: number);
/**
* @returns {any}
*/
  valueOf(): any;
/**
*/
  amount: bigint;
/**
*/
  id: RuneId;
/**
*/
  output: number;
}
/**
*/
export class Etching {
/**
** Return copy of self without private attributes.
*/
  toJSON(): Object;
/**
* Return stringified version of self.
*/
  toString(): string;
  free(): void;
/**
* @param {EtchingParams | undefined} [params]
*/
  constructor(params?: EtchingParams);
/**
* @returns {bigint | undefined}
*/
  supply(): bigint | undefined;
/**
* @returns {any}
*/
  valueOf(): any;
/**
*/
  divisibility?: number;
/**
*/
  premine?: bigint;
/**
*/
  rune?: Rune;
/**
*/
  spacers?: number;
/**
*/
  symbol?: string;
/**
*/
  terms?: Terms;
/**
*/
  turbo: boolean;
}
/**
*/
export class Range {
/**
** Return copy of self without private attributes.
*/
  toJSON(): Object;
/**
* Return stringified version of self.
*/
  toString(): string;
  free(): void;
/**
* @param {bigint | undefined} [start]
* @param {bigint | undefined} [end]
*/
  constructor(start?: bigint, end?: bigint);
/**
* @returns {any}
*/
  valueOf(): any;
/**
*/
  end?: bigint;
/**
*/
  start?: bigint;
}
/**
*/
export class Rune {
/**
** Return copy of self without private attributes.
*/
  toJSON(): Object;
/**
* Return stringified version of self.
*/
  toString(): string;
  free(): void;
/**
* @param {bigint} value
*/
  constructor(value: bigint);
/**
* @returns {boolean}
*/
  isReserved(): boolean;
/**
* @returns {string}
*/
  commitment(): string;
/**
* @returns {any}
*/
  valueOf(): any;
/**
* @param {Network} network
* @returns {number}
*/
  static firstRuneHeight(network: Network): number;
/**
* @param {Network} network
* @param {number} height
* @returns {Rune}
*/
  static minimumAtHeight(network: Network, height: number): Rune;
/**
* @param {bigint} block
* @param {number} tx
* @returns {Rune}
*/
  static reserved(block: bigint, tx: number): Rune;
/**
* @param {string} s
* @returns {Rune}
*/
  static fromString(s: string): Rune;
/**
*/
  readonly name: string;
/**
*/
  value: bigint;
}
/**
*/
export class RuneId {
/**
** Return copy of self without private attributes.
*/
  toJSON(): Object;
/**
* Return stringified version of self.
*/
  toString(): string;
  free(): void;
/**
* @param {bigint} block
* @param {number} tx
*/
  constructor(block: bigint, tx: number);
/**
* @param {RuneId} next
* @returns {Range | undefined}
*/
  delta(next: RuneId): Range | undefined;
/**
* @param {bigint} block
* @param {number} tx
* @returns {RuneId | undefined}
*/
  next(block: bigint, tx: number): RuneId | undefined;
/**
* @returns {string}
*/
  toString(): string;
/**
* @param {string} s
* @returns {RuneId}
*/
  static fromString(s: string): RuneId;
/**
* @returns {any}
*/
  valueOf(): any;
/**
*/
  block: bigint;
/**
*/
  tx: number;
}
/**
*/
export class Runestone {
/**
** Return copy of self without private attributes.
*/
  toJSON(): Object;
/**
* Return stringified version of self.
*/
  toString(): string;
  free(): void;
/**
* @param {RunestoneParams | undefined} [params]
*/
  constructor(params?: RunestoneParams);
/**
* @returns {string}
*/
  encipher(): string;
/**
* @param {Transaction} transaction
* @returns {Runestone}
*/
  static decipher(transaction: Transaction): Runestone;
/**
* @returns {any}
*/
  valueOf(): any;
/**
*/
  edicts: (Edict)[];
/**
*/
  etching?: Etching;
/**
*/
  mint?: RuneId;
/**
*/
  pointer?: number;
}
/**
*/
export class SpacedRune {
/**
** Return copy of self without private attributes.
*/
  toJSON(): Object;
/**
* Return stringified version of self.
*/
  toString(): string;
  free(): void;
/**
* @param {Rune} rune
* @param {number} spacers
*/
  constructor(rune: Rune, spacers: number);
/**
* @returns {any}
*/
  valueOf(): any;
/**
* @param {string} s
* @returns {SpacedRune}
*/
  static fromString(s: string): SpacedRune;
/**
*/
  readonly name: string;
/**
*/
  rune: Rune;
/**
*/
  readonly runeValue: bigint;
/**
*/
  spacers: number;
}
/**
*/
export class Terms {
/**
** Return copy of self without private attributes.
*/
  toJSON(): Object;
/**
* Return stringified version of self.
*/
  toString(): string;
  free(): void;
/**
* @param {TermsParams | undefined} [params]
*/
  constructor(params?: TermsParams);
/**
* @returns {any}
*/
  valueOf(): any;
/**
*/
  amount?: bigint;
/**
*/
  cap?: bigint;
/**
*/
  height?: Range;
/**
*/
  offset?: Range;
}

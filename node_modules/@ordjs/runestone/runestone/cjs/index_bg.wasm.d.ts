/* tslint:disable */
/* eslint-disable */
export const memory: WebAssembly.Memory;
export function __wbg_terms_free(a: number): void;
export function __wbg_get_terms_height(a: number): number;
export function __wbg_set_terms_height(a: number, b: number): void;
export function __wbg_get_terms_offset(a: number): number;
export function __wbg_set_terms_offset(a: number, b: number): void;
export function terms_new(a: number): number;
export function terms_amount(a: number): number;
export function terms_set_amount(a: number, b: number): void;
export function terms_cap(a: number): number;
export function terms_set_cap(a: number, b: number): void;
export function terms_valueOf(a: number, b: number): void;
export function __wbg_runeid_free(a: number): void;
export function __wbg_get_runeid_block(a: number): number;
export function __wbg_set_runeid_block(a: number, b: number): void;
export function __wbg_get_runeid_tx(a: number): number;
export function __wbg_set_runeid_tx(a: number, b: number): void;
export function runeid_new(a: number, b: number): number;
export function runeid_delta(a: number, b: number): number;
export function runeid_next(a: number, b: number, c: number): number;
export function runeid_toString(a: number, b: number): void;
export function runeid_fromString(a: number, b: number, c: number): void;
export function runeid_valueOf(a: number, b: number): void;
export function __wbg_spacedrune_free(a: number): void;
export function __wbg_get_spacedrune_rune(a: number): number;
export function __wbg_set_spacedrune_rune(a: number, b: number): void;
export function __wbg_get_spacedrune_spacers(a: number): number;
export function __wbg_set_spacedrune_spacers(a: number, b: number): void;
export function spacedrune_new(a: number, b: number): number;
export function spacedrune_name(a: number, b: number): void;
export function spacedrune_runeValue(a: number): number;
export function spacedrune_valueOf(a: number, b: number): void;
export function spacedrune_fromString(a: number, b: number, c: number): void;
export function __wbg_range_free(a: number): void;
export function __wbg_get_range_start(a: number, b: number): void;
export function __wbg_set_range_start(a: number, b: number, c: number): void;
export function __wbg_get_range_end(a: number, b: number): void;
export function __wbg_set_range_end(a: number, b: number, c: number): void;
export function range_new(a: number, b: number, c: number, d: number): number;
export function range_valueOf(a: number, b: number): void;
export function __wbg_rune_free(a: number): void;
export function rune_new(a: number): number;
export function rune_value(a: number): number;
export function rune_set_value(a: number, b: number): void;
export function rune_isReserved(a: number): number;
export function rune_commitment(a: number, b: number): void;
export function rune_name(a: number, b: number): void;
export function rune_valueOf(a: number, b: number): void;
export function rune_firstRuneHeight(a: number): number;
export function rune_minimumAtHeight(a: number, b: number): number;
export function rune_reserved(a: number, b: number): number;
export function rune_fromString(a: number, b: number, c: number): void;
export function decodeHex(a: number, b: number): number;
export function encodeHex(a: number, b: number): void;
export function __wbg_etching_free(a: number): void;
export function __wbg_get_etching_divisibility(a: number): number;
export function __wbg_set_etching_divisibility(a: number, b: number): void;
export function __wbg_get_etching_rune(a: number): number;
export function __wbg_set_etching_rune(a: number, b: number): void;
export function __wbg_get_etching_spacers(a: number, b: number): void;
export function __wbg_set_etching_spacers(a: number, b: number, c: number): void;
export function __wbg_get_etching_symbol(a: number): number;
export function __wbg_set_etching_symbol(a: number, b: number): void;
export function __wbg_get_etching_terms(a: number): number;
export function __wbg_set_etching_terms(a: number, b: number): void;
export function __wbg_get_etching_turbo(a: number): number;
export function __wbg_set_etching_turbo(a: number, b: number): void;
export function etching_new(a: number): number;
export function etching_premine(a: number): number;
export function etching_set_premine(a: number, b: number): void;
export function etching_supply(a: number): number;
export function etching_valueOf(a: number, b: number): void;
export function create_tx(a: number, b: number): void;
export function __wbg_edict_free(a: number): void;
export function __wbg_get_edict_id(a: number): number;
export function __wbg_set_edict_id(a: number, b: number): void;
export function __wbg_get_edict_output(a: number): number;
export function __wbg_set_edict_output(a: number, b: number): void;
export function edict_new(a: number, b: number, c: number, d: number): number;
export function edict_amount(a: number): number;
export function edict_set_amount(a: number, b: number): void;
export function edict_valueOf(a: number, b: number): void;
export function __wbg_runestone_free(a: number): void;
export function __wbg_get_runestone_etching(a: number): number;
export function __wbg_set_runestone_etching(a: number, b: number): void;
export function __wbg_get_runestone_mint(a: number): number;
export function __wbg_set_runestone_mint(a: number, b: number): void;
export function __wbg_get_runestone_pointer(a: number, b: number): void;
export function __wbg_set_runestone_pointer(a: number, b: number, c: number): void;
export function runestone_new(a: number): number;
export function runestone_edicts(a: number): number;
export function runestone_set_edicts(a: number, b: number, c: number): void;
export function runestone_encipher(a: number, b: number): void;
export function runestone_decipher(a: number): number;
export function runestone_valueOf(a: number, b: number): void;
export function rustsecp256k1_v0_8_1_context_create(a: number): number;
export function rustsecp256k1_v0_8_1_context_destroy(a: number): void;
export function rustsecp256k1_v0_8_1_default_illegal_callback_fn(a: number, b: number): void;
export function rustsecp256k1_v0_8_1_default_error_callback_fn(a: number, b: number): void;
export function __wbindgen_malloc(a: number, b: number): number;
export function __wbindgen_realloc(a: number, b: number, c: number, d: number): number;
export function __wbindgen_add_to_stack_pointer(a: number): number;
export function __wbindgen_free(a: number, b: number, c: number): void;
export function __wbindgen_exn_store(a: number): void;
